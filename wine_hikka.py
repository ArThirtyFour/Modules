from pyrogram import Client, filters
from modules.plugins_1system.settings.main_settings import module_list, file_list
from prefix import my_prefix
from requirements_installer import install_library
from modules.plugins_1system.restarter import restart
import base64
import os
import shutil
import requests

install_library('openai')
from openai import AsyncOpenAI

async def create_module(module_text):
    promt = """
–¢—ã ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥—É–ª–µ–π –ø–æ–¥ FoxUserBot. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî **–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –º–æ–¥—É–ª—å —Å Hikka (–Ω–∞ Telethon)** –Ω–∞ **FoxUserBot (–Ω–∞ Pyrogram)**.

üîß –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π __–¢–û–õ–¨–ö–û –ö–û–î–û–ú__, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, Markdown, –∫–∞–≤—ã—á–µ–∫ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ Pyrogram. **–ù–ï–õ–¨–ó–Ø** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Telethon (`.conversation`, `.event`, `.respond`, `.pattern`, `await event.edit()`, –∏ —Ç.–ø.).
- –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ `@Client.on_message(...)` –∏ `filters.command(..., prefixes=my_prefix()) & filters.me`.
- –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è `module_list[...]` –∏ `file_list[...]`.

üì• –î–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏—Å–ø–æ–ª—å–∑—É–π:
from requirements_installer import install_library  
install_library("–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–∏–±–ª–∏–æ—Ç–µ–∫–∏")

üí° –í–Ω–∏–º–∞–Ω–∏–µ: –í Pyrogram –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç—Ä–∏–±—É—Ç id, –∞ –Ω–µ document_id.
–ü—Ä–∏–º–µ—Ä:
<emoji id=5326015457155620929></emoji>
–í–º–µ—Å—Ç–æ:
<emoji document_id=5326015457155620929></emoji>

üì¶ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–ù–ï –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å):
- wheel
- telegraph
- requests
- wget
- pystyle
- wikipedia
- gTTS
- kurigram
- lyricsgenius

üîÅ –†–∞–±–æ—Ç–∞ —Å async-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:
- –ú–µ—Ç–æ–¥—ã –≤—Ä–æ–¥–µ `search_messages`, `get_chat_history`, `get_chat_members` ‚Äî —ç—Ç–æ async-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã.
- –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —á–µ—Ä–µ–∑ `async for`, **–ë–ï–ó `await` –ø–µ—Ä–µ–¥ –Ω–∏–º–∏**.

‚úÖ –ü—Ä–∏–º–µ—Ä:
async for msg in client.get_chat_history("spambot", limit=1):  
    await message.edit(msg.text)

üö´ **–ó–∞–ø—Ä–µ—â–µ–Ω–æ:**
- –ù–ï–õ–¨–ó–Ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `await client.get_chat_history(...)` ‚Äî –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É.
- –ù–ï–õ–¨–ó–Ø —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä—ã (`@Client.on_message(...)`) –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π. –≠—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Pyrogram.
- –ù–ï–õ–¨–ó–Ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `client.remove_handler(...)`, `conversation`, –∏–ª–∏ `await conv.send_message(...)`.
‚ö†Ô∏è –î–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞, –≤–º–µ—Å—Ç–æ Telethon-style `.conversation`, –∏—Å–ø–æ–ª—å–∑—É–π `client.listen()` —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ ID –±–æ—Ç–∞ –∏ —Ç–∞–π–º–∞—É—Ç–æ–º.  



üì¶ –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Pyrogram-–º–æ–¥—É–ª—è:
from pyrogram import Client, filters  
from modules.plugins_1system.settings.main_settings import module_list, file_list  
from prefix import my_prefix  

@Client.on_message(filters.command("spamban", prefixes=my_prefix()) & filters.me)  
async def spamban(client, message):  
    await message.edit("Checking your account for Spamban...")  
    await client.unblock_user("spambot")  
    await client.send_message("spambot", "/start")  
    async for msg in client.get_chat_history("spambot", limit=1):  
        await message.edit(msg.text)  

module_list["SpamBan"] = f"{my_prefix()}spamban"  
file_list["SpamBan"] = "spamban.py"

==================

–í–æ—Ç –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å:

""" + module_text




    client_ai  = AsyncOpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=str(base64.b64decode("c2stb3ItdjEtNjg1YzZiMDc2YjJhNDE4M2VkNTUzOWIyMTk3ZWY4MTk3YjkxYTE1ZDMxOTAxZjQ2YTQ5MTk0NTFjYzkxYzRmZQ==").decode('utf-8'))
            )
    response = await client_ai.chat.completions.create(
                model="deepseek/deepseek-chat:free",
                messages=[{"role": "user", "content": promt}]
            )
    return response.choices[0].message.content






@Client.on_message(filters.command("wine_hikka", prefixes=my_prefix()) & filters.me)
async def wine_hikka(client, message):
    file_content = None
    module_name = None
    if message.reply_to_message and message.reply_to_message.document:
        await message.edit(f"ü¶ä | Loading module from reply...")
        file = await client.download_media(message.reply_to_message.document)
        with open(file, "r", encoding="utf-8") as f:
            file_content = f.read()
        os.remove(file)
        if os.path.exists("downloads"):
            shutil.rmtree("downloads")
        module_name = message.reply_to_message.document.file_name.replace(".py", "")
    elif len(message.command) > 1 and message.command[1].startswith("http"):
        url = message.command[1]
        await message.edit(f"ü¶ä | Loading module from URL: {url}")
        try:
            response = requests.get(url)
            response.raise_for_status() 
            file_content = response.text
            module_name = url.split("/")[-1].replace(".py", "")
        except requests.exceptions.RequestException as e:
            await message.edit(f"ü¶ä | Error loading module from URL: {e}")
            return
    else:
        await message.edit("ü¶ä | Reply to a module file or provide a link!")
        return

    if file_content is None:
        await message.edit("ü¶ä | Failed to get module content.")
        return

    await message.edit(f"ü¶ä | Generating module...")
    answer = await create_module(file_content)
    file_path = f"modules/plugins_2custom/{module_name}.py"
    if answer is not None:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(answer)
        module_list[module_name] = f'{my_prefix()}{module_name}'
        file_list[module_name] = f'{module_name}.py'
        await message.edit(f"ü¶ä | Module generated at <code>{file_path}</code> \n <b>Restarting...</b>")
        await restart(message, restart_type="restart")
    else:
        await message.edit(f"ü¶ä | Error generating module :(")


module_list['Wine Hikka'] = f'{my_prefix()}wine_hikka'
file_list['Wine Hikka'] = 'wine_hikka.py'
